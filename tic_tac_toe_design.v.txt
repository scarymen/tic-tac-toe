module game(input px1,nx1,py1,ny1, input reg[1:0] in1,input clk,rst1, output reg win=0,lose=0,draw=0, output reg[2:0] t0,t1,t2,t3,t4,t5,t6,t7,t8);

reg px,nx,py,ny;
reg[1:0] in;
reg rst;

debounce Dpx(px1,clk,px);
debounce Dpy(py1,clk,py);
debounce Dnx(nx1,clk,nx);
debounce Dny(ny1,clk,ny);

debounce d0(in1[0],clk,in[0]);
debounce d1(in1[1],clk,in[1]);

debounce reset (rst1,clk,rst);

reg[2:0] x=0,y=0;
reg [2:0] tic[8:0];               // it should be [2:0]
reg [2:0] d[1:0],r[2:0],c[2:0];    
integer step=0;
reg[3:0] prev;

// defining the position
always@(posedge clk)
begin 
	prev = 3*y+x;
	if(x<2 && px)
			x=x+1;
	if(x>0 && nx)
			x=x-1;
	if(y<2 && py)
			y=y+1;
 	if(y>0 && ny)
			y=y-1;

	tic[prev] = tic[prev]-3'b100;
	tic[3*y + x] = 3'b100 + tic[3*y + x];
end

always@(in[0],in[1])                     //  
begin 
	if(tic[3*y + x] == 0)
		begin
			tic[3*y + x] = in;
			step =step+1;
		end


	r[0] = tic[0][1:0]+tic[1][1:0]+tic[2][1:0];      //here tic[0] is a 3 bit bus...we require last two bits of tic[0] not all the three bits
	r[1] = tic[3][1:0]+tic[4][1:0]+tic[5][1:0];
	r[2] = tic[6][1:0]+tic[7][1:0]+tic[8][1:0];

	c[0] = tic[0][1:0]+tic[3][1:0]+tic[6][1:0];
	c[1] = tic[1][1:0]+tic[4][1:0]+tic[7][1:0];
	c[2] = tic[2][1:0]+tic[5][1:0]+tic[8][1:0];

	d[0] = tic[0][1:0]+tic[4][1:0]+tic[8][1:0];
	d[1] = tic[2][1:0]+tic[4][1:0]+tic[6][1:0];

	if(r[0]==3 || r[1]==3 || r[2]==3)
		win = 1;
	else if(r[0]==6 ||r[1]==6 ||r[2]==6)
		lose = 1;
	else if(c[0]==3 || c[1]==3 || c[2]==3)
		win = 1;
	else if(c[0]==6 ||c[1]==6 ||c[2]==6)
		lose = 1;
	else if(d[0]==3 ||d[1]==3)
		win = 1;
	else if(d[0]==6 ||d[1]==6)
		lose = 1;
	else if(step == 9)
		draw = 1; 

	tic[3*y+x] = tic[3*y+x] - 3'b100;
	x=0; y=0;
end

always@(posedge rst)
begin 
	win = 0;
	lose = 0;
	draw = 0;
	d[0] = 0;d[1] = 0;r[0] = 0;r[1] = 0;r[2] = 0; c[0] = 0;c[1] = 0;c[2] = 0;
	tic[0] = 3'b100;tic[1] = 0;tic[2] = 0;tic[3] = 0;tic[4] = 0;tic[5] = 0;tic[6] = 0;tic[7] = 0;tic[8] = 0;   // initially tic[0] = 3'b100;
	x = 0;y = 0;
 step = 0;
end

always@(*)          //  posedge of clk is enough i think
begin
	t0=tic[0];    // tic[0]
	t1=tic[1];    // tic[1]
	t2=tic[2];    // tic[2]
	t3=tic[3];    // tic[3]
	t4=tic[4];    // tic[4]
	t5=tic[5];    // tic[5]
	t6=tic[6];    // tic[6]
	t7=tic[7];    // tic[7]
	t8=tic[8];    // tic[8]
end

endmodule

// debouncing module
module debounce(input in,clk,output out);
wire Q1,Q2,Q2_bar;
my_dff d1(clk, in,Q1 );
my_dff d2(clk, Q1,Q2 );
assign Q2_bar = ~Q2;
assign out = Q1 & Q2_bar;
endmodule
// Dff
module my_dff(input DFF_CLOCK, D, output reg Q);

    always @ (posedge DFF_CLOCK) begin
        Q <= D;
    end

endmodule